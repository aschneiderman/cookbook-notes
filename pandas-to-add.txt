
try df.info()

vectorize ex:
df['distance'] = my_function(x,y, df['lattitude'], df['longitude'])

Equiv of SQL:
https://pandas.pydata.org/pandas-docs/stable/getting_started/comparison/comparison_with_sql.html

Fast, Flexible, Easy and Intuitive: How to Speed Up Your Pandas Projects:
https://realpython.com/fast-flexible-pandas/


# Index

index: looks like just another column, but it's not
it's a unique label for each of your rows
ex: to look up a row, use index

just like w arrays etc, by default it's 0,1,2, etc 
But can use any data -- eg date or students name 
multi index: where it's unique not by one column but several columns -- esp w hierarchical data

Speed up
https://youtu.be/HN5d490_KKk
https://youtu.be/N4pj3CS857c
https://youtu.be/nxWginnBklU



Lots of other great info on pandas
https://github.com/BindiChen/machine-learning



.dtypes

count: non missing values

chain w spacing:
.query

to reduce memory usage -- which means more room for data -- convert everything to types, including 'category'




Don't use apply if you can
instead 
autos.make.astype(str).isin({'red', 'blue'})

or if make is a categorical:
autos.make.isin({'red', 'blue'})

category: stores int and maps it to string 


%%timeit at start of cell: will time it

for loops: not always bad, just thing twice -- often don't need it, not using it is faster

Pivot table w the fixins:
( 
.groupby
.agg(['min','mean', my_function])

