
In one series but not another
res = ps1[~ps1.isin(ps2)]

try df.info()

Equiv of SQL:
https://pandas.pydata.org/pandas-docs/stable/getting_started/comparison/comparison_with_sql.html

# Index

index: looks like just another column, but it's not
it's a unique label for each of your rows
ex: to look up a row, use index

just like w arrays etc, by default it's 0,1,2, etc 
But can use any data -- eg date or students name 
multi index: where it's unique not by one column but several columns -- esp w hierarchical data

Speed up
https://youtu.be/HN5d490_KKk
https://youtu.be/N4pj3CS857c
https://youtu.be/nxWginnBklU


Learning python for data folks from him:
https://store.metasnake.com/py4ds

Effective Python Testing Webinar

Do you want to:Sleep better at night?Kill bugs in your code?Keep customers happy?Make developers stay sane? You do test your Python code right? If not, the best time to start is now.  In this webinar, we will introduce simple testing strategies, and how you can start to reap the benefits of testing now.
https://store.metasnake.com/effective-python-testing-webinar

Lots of other great info on pandas
https://github.com/BindiChen/machine-learning



.dtypes

count: non missing values

chain w spacing:
.query

to reduce memory usage -- which means more room for data -- convert everything to types, including 'category'




Don't use apply if you can
instead 
autos.make.astype(str).isin({'red', 'blue'})

or if make is a categorical:
autos.make.isin({'red', 'blue'})

category: stores int and maps it to string 


%%timeit at start of cell: will time it

for loops: not always bad, just thing twice -- often don't need it, not using it is faster

Pivot table w the fixins:
( 
.groupby
.agg(['min','mean', my_function])




pandas often have several ways to do things 

np.where, np.select
https://gitlab.com/cheevahagadog/talks-demos-n-such/-/blob/master/PyGotham2019/PyGotham-updated.ipynb